{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { APIMethods, Common } from '@helpers/enums/enums';\nimport { sessionStorageUtil } from '@helpers/utils/storageFunctions';\nconst initialState = {\n  authenticationAPIDetails: {\n    id: null,\n    username: '',\n    email: '',\n    firstName: '',\n    lastName: '',\n    gender: '',\n    image: '',\n    token: ''\n  },\n  currentUser: [],\n  googleLoginDetails: {\n    iss: '',\n    azp: '',\n    aud: '',\n    sub: '',\n    email: '',\n    email_verified: false,\n    nbf: null,\n    name: '',\n    picture: '',\n    given_name: '',\n    family_name: '',\n    locale: '',\n    iat: null,\n    exp: null,\n    jti: ''\n  },\n  closeFriends: [],\n  onlineFriends: [],\n  friendRequests: [],\n  posts: [],\n  alerts: [],\n  isLoading: false,\n  selectedUser: {}\n};\nexport const getAuthenticationAPIDetails = createAsyncThunk('APICall/getAuthenticationAPIDetails', async ({\n  username,\n  password\n}, {\n  dispatch,\n  rejectWithValue\n}) => {\n  const authenticationAPIResponse = await fetch(process.env.REACT_APP_AUTHENTICATION_URL, {\n    method: APIMethods.POST,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  }).then(data => data.json());\n  return authenticationAPIResponse;\n});\nexport const generateRandomUsers = createAsyncThunk('APICall/generateRandomUser', async ({\n  filterOptions\n}, {\n  dispatch,\n  rejectWithValue\n}) => {\n  let filtersAsString = '?inc=';\n  filterOptions.filter.forEach((filter, index) => {\n    filtersAsString += index === 0 ? filter : ',' + filter;\n  });\n  filterOptions.results && (filtersAsString += `&results=${filterOptions.results}`);\n  const randomUserEndpoint = process.env.REACT_APP_RANDOM_USER_URL + filtersAsString;\n  const authenticationAPIResponse = await fetch(randomUserEndpoint).then(data => data.json());\n  return authenticationAPIResponse;\n});\nexport const generateRandomPosts = createAsyncThunk('APICall/generateRandomPosts', async ({\n  page = 0,\n  limit = 20\n}, {\n  dispatch,\n  rejectWithValue\n}) => {\n  const postEndPoint = `${process.env.REACT_APP_RANDOM_POSTS_URL}?page=${page}&limit=${limit}`;\n  const authenticationAPIResponse = await fetch(postEndPoint, {\n    headers: {\n      'Content-Type': 'application/json',\n      'app-id': process.env.REACT_APP_DUMMY_API_KEY\n    }\n  }).then(data => data.json());\n  return authenticationAPIResponse;\n});\nexport const proposalSlice = createSlice({\n  name: 'APIRequestState',\n  initialState,\n  reducers: {\n    setAuthenticationAPIDetails: (state, action) => {\n      state.authenticationAPIDetails = action.payload;\n    },\n    setGoogleAPIDetails: (state, action) => {\n      state.googleLoginDetails = action.payload;\n    },\n    setAlertMessage: (state, action) => {\n      action.payload.identifier = state.alerts.length === 0 ? 1 : state.alerts.length + 1;\n      state.alerts = [...state.alerts, action.payload];\n    },\n    setAlertMessageAsRemoved: (state, action) => {\n      state.alerts = state.alerts.filter(alert => alert.identifier !== action.payload);\n    },\n    setIsLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    setRandomCloseFriends: (state, action) => {\n      state.closeFriends = action.payload.results;\n    },\n    setRandomOnlineFriends: (state, action) => {\n      state.onlineFriends = action.payload.results;\n    },\n    setRandomPosts: (state, action) => {\n      state.posts = action.payload;\n    },\n    setSelectedUser: (state, action) => {\n      state.selectedUser = action.payload;\n    },\n    setCurrentUser: (state, action) => {\n      state.currentUser = action.payload.results;\n    },\n    setFriendRequests: (state, action) => {\n      state.friendRequests = action.payload.results;\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(generateRandomUsers.pending, state => {\n      state.isLoading = true;\n    }).addCase(generateRandomUsers.fulfilled, (state, action) => {\n      state.isLoading = false;\n    }).addCase(generateRandomUsers.rejected, (state, error) => {\n      state.isLoading = false;\n    });\n    builder.addCase(getAuthenticationAPIDetails.pending, state => {\n      state.isLoading = true;\n    }).addCase(getAuthenticationAPIDetails.fulfilled, (state, action) => {\n      sessionStorageUtil.set(Common.TOKEN, action.payload.token);\n      state.isLoading = false;\n    }).addCase(getAuthenticationAPIDetails.rejected, (state, error) => {\n      state.isLoading = false;\n    });\n  }\n});\nexport const {\n  setSelectedUser,\n  setAuthenticationAPIDetails,\n  setGoogleAPIDetails,\n  setAlertMessageAsRemoved,\n  setAlertMessage,\n  setIsLoading,\n  setRandomCloseFriends,\n  setRandomOnlineFriends,\n  setRandomPosts,\n  setCurrentUser,\n  setFriendRequests\n} = proposalSlice.actions;\nexport default proposalSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","APIMethods","Common","sessionStorageUtil","initialState","authenticationAPIDetails","id","username","email","firstName","lastName","gender","image","token","currentUser","googleLoginDetails","iss","azp","aud","sub","email_verified","nbf","name","picture","given_name","family_name","locale","iat","exp","jti","closeFriends","onlineFriends","friendRequests","posts","alerts","isLoading","selectedUser","getAuthenticationAPIDetails","password","dispatch","rejectWithValue","authenticationAPIResponse","fetch","process","env","REACT_APP_AUTHENTICATION_URL","method","POST","headers","body","JSON","stringify","then","data","json","generateRandomUsers","filterOptions","filtersAsString","filter","forEach","index","results","randomUserEndpoint","REACT_APP_RANDOM_USER_URL","generateRandomPosts","page","limit","postEndPoint","REACT_APP_RANDOM_POSTS_URL","REACT_APP_DUMMY_API_KEY","proposalSlice","reducers","setAuthenticationAPIDetails","state","action","payload","setGoogleAPIDetails","setAlertMessage","identifier","length","setAlertMessageAsRemoved","alert","setIsLoading","setRandomCloseFriends","setRandomOnlineFriends","setRandomPosts","setSelectedUser","setCurrentUser","setFriendRequests","extraReducers","builder","addCase","pending","fulfilled","rejected","error","set","TOKEN","actions","reducer"],"sources":["C:/Users/iamsa/OneDrive/Desktop/Afford Medical/22053271/Solution 2/react-social-media-app/src/helpers/reducers/APIRequestReducer.ts"],"sourcesContent":["import { PayloadAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { AppDispatch, RootState } from '@base/store';\r\nimport { APIMethods, Common } from '@helpers/enums/enums';\r\nimport { GenerateUser, GenerateUserAPIResponse, RandomPost, RandomUser, RandomUserFilter } from '@helpers/types/api';\r\nimport { LoginResponse } from '@helpers/types/login';\r\nimport { APIRequestState } from '@helpers/types/state';\r\nimport { sessionStorageUtil } from '@helpers/utils/storageFunctions';\r\n\r\nconst initialState: APIRequestState = {\r\n  authenticationAPIDetails: {\r\n    id: null,\r\n    username: '',\r\n    email: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    gender: '',\r\n    image: '',\r\n    token: '',\r\n  },\r\n  currentUser: [],\r\n  googleLoginDetails: {\r\n    iss: '',\r\n    azp: '',\r\n    aud: '',\r\n    sub: '',\r\n    email: '',\r\n    email_verified: false,\r\n    nbf: null,\r\n    name: '',\r\n    picture: '',\r\n    given_name: '',\r\n    family_name: '',\r\n    locale: '',\r\n    iat: null,\r\n    exp: null,\r\n    jti: '',\r\n  },\r\n  closeFriends: [],\r\n  onlineFriends: [],\r\n  friendRequests: [],\r\n  posts: [],\r\n  alerts: [],\r\n  isLoading: false,\r\n  selectedUser: {},\r\n};\r\n\r\nexport const getAuthenticationAPIDetails = createAsyncThunk<\r\n  LoginResponse,\r\n  {\r\n    username: string;\r\n    password: string;\r\n  },\r\n  { state: RootState; dispatch: AppDispatch }\r\n>('APICall/getAuthenticationAPIDetails', async ({ username, password }, { dispatch, rejectWithValue }) => {\r\n  const authenticationAPIResponse: LoginResponse = await fetch(process.env.REACT_APP_AUTHENTICATION_URL as string, {\r\n    method: APIMethods.POST,\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      username,\r\n      password,\r\n    }),\r\n  }).then((data) => data.json());\r\n\r\n  return authenticationAPIResponse;\r\n});\r\n\r\nexport const generateRandomUsers = createAsyncThunk<\r\n  GenerateUserAPIResponse,\r\n  {\r\n    filterOptions: GenerateUser;\r\n  },\r\n  { state: RootState; dispatch: AppDispatch }\r\n>('APICall/generateRandomUser', async ({ filterOptions }, { dispatch, rejectWithValue }) => {\r\n  let filtersAsString = '?inc=';\r\n  filterOptions.filter.forEach((filter: RandomUserFilter, index: number) => {\r\n    filtersAsString += index === 0 ? filter : ',' + filter;\r\n  });\r\n\r\n  filterOptions.results && (filtersAsString += `&results=${filterOptions.results}`);\r\n\r\n  const randomUserEndpoint = process.env.REACT_APP_RANDOM_USER_URL + filtersAsString;\r\n  const authenticationAPIResponse: GenerateUserAPIResponse = await fetch(randomUserEndpoint).then((data) => data.json());\r\n\r\n  return authenticationAPIResponse;\r\n});\r\n\r\nexport const generateRandomPosts = createAsyncThunk<\r\n  GenerateUserAPIResponse,\r\n  {\r\n    page?: string;\r\n    limit?: string;\r\n  },\r\n  { state: RootState; dispatch: AppDispatch }\r\n>('APICall/generateRandomPosts', async ({ page = 0, limit = 20 }, { dispatch, rejectWithValue }) => {\r\n  const postEndPoint = `${process.env.REACT_APP_RANDOM_POSTS_URL}?page=${page}&limit=${limit}`;\r\n  const authenticationAPIResponse: GenerateUserAPIResponse = await fetch(postEndPoint, {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'app-id': process.env.REACT_APP_DUMMY_API_KEY as string,\r\n    },\r\n  }).then((data) => data.json());\r\n\r\n  return authenticationAPIResponse;\r\n});\r\n\r\nexport const proposalSlice = createSlice({\r\n  name: 'APIRequestState',\r\n  initialState,\r\n  reducers: {\r\n    setAuthenticationAPIDetails: (state, action: PayloadAction<APIRequestState['authenticationAPIDetails']>) => {\r\n      state.authenticationAPIDetails = action.payload;\r\n    },\r\n    setGoogleAPIDetails: (state, action: PayloadAction<APIRequestState['googleLoginDetails']>) => {\r\n      state.googleLoginDetails = action.payload;\r\n    },\r\n    setAlertMessage: (state, action) => {\r\n      action.payload.identifier = state.alerts.length === 0 ? 1 : state.alerts.length + 1;\r\n      state.alerts = [...state.alerts, action.payload];\r\n    },\r\n    setAlertMessageAsRemoved: (state, action: PayloadAction<number>) => {\r\n      state.alerts = state.alerts.filter((alert) => alert.identifier !== action.payload);\r\n    },\r\n    setIsLoading: (state, action: PayloadAction<APIRequestState['isLoading']>) => {\r\n      state.isLoading = action.payload;\r\n    },\r\n    setRandomCloseFriends: (state, action: PayloadAction<GenerateUserAPIResponse>) => {\r\n      state.closeFriends = action.payload.results;\r\n    },\r\n    setRandomOnlineFriends: (state, action: PayloadAction<GenerateUserAPIResponse>) => {\r\n      state.onlineFriends = action.payload.results;\r\n    },\r\n    setRandomPosts: (state, action: PayloadAction<RandomPost[]>) => {\r\n      state.posts = action.payload;\r\n    },\r\n    setSelectedUser: (state, action: PayloadAction<RandomUser>) => {\r\n      state.selectedUser = action.payload;\r\n    },\r\n    setCurrentUser: (state, action: PayloadAction<GenerateUserAPIResponse>) => {\r\n      state.currentUser = action.payload.results;\r\n    },\r\n    setFriendRequests: (state, action: PayloadAction<GenerateUserAPIResponse>) => {\r\n      state.friendRequests = action.payload.results;\r\n    },\r\n  },\r\n  extraReducers(builder) {\r\n    builder\r\n      .addCase(generateRandomUsers.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(generateRandomUsers.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n      })\r\n      .addCase(generateRandomUsers.rejected, (state, error) => {\r\n        state.isLoading = false;\r\n      });\r\n\r\n    builder\r\n      .addCase(getAuthenticationAPIDetails.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getAuthenticationAPIDetails.fulfilled, (state, action) => {\r\n        sessionStorageUtil.set(Common.TOKEN, action.payload.token);\r\n\r\n        state.isLoading = false;\r\n      })\r\n      .addCase(getAuthenticationAPIDetails.rejected, (state, error) => {\r\n        state.isLoading = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  setSelectedUser,\r\n  setAuthenticationAPIDetails,\r\n  setGoogleAPIDetails,\r\n  setAlertMessageAsRemoved,\r\n  setAlertMessage,\r\n  setIsLoading,\r\n  setRandomCloseFriends,\r\n  setRandomOnlineFriends,\r\n  setRandomPosts,\r\n  setCurrentUser,\r\n  setFriendRequests,\r\n} = proposalSlice.actions;\r\n\r\nexport default proposalSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}